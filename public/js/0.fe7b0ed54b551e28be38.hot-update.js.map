{"version":3,"sources":["webpack:///./src/components/main.js?cabb"],"names":["url","ws","WebSocket","Main","user","error","loading","getCurrentUser","logOut","fetchedGameData","updatedGame","addNewMessage","fetchedMessages","createdGame","clearError","setError","stopLoading","props","context","catchError","window","location","replace","handleNewMessage","res","message","JSON","parse","data","type","setState","then","catch","id","onmessage","onclose","nextProps","send","username","nickname","Children","map","children","child","cloneElement","flashError","loadingScreen","contextTypes","router","PropTypes","object","isRequired"],"mappings":"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","file":"0.fe7b0ed54b551e28be38.hot-update.js","sourcesContent":["import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport NavBar from \"./navBar\";\nimport { getCurrentUser, logOut, clearError, setError, stopLoading } from \"../actions/userActions\";\nimport { fetchedGameData, updatedGame, createdGame } from \"../actions/gameActions\";\nimport { addNewMessage, fetchedMessages } from \"../actions/chatActions\";\n\nconst url = process.env.WS_URL + \"/ws\";\nconst ws = new WebSocket(url);\n\n@connect(\n  ({ user, error, loading }) => ({ user, error, loading }),\n  ({\n    getCurrentUser,\n    logOut,\n    fetchedGameData,\n    updatedGame,\n    addNewMessage,\n    fetchedMessages,\n    createdGame,\n    clearError,\n    setError,\n    stopLoading\n  })\n)\nexport default class Main extends Component {\n  constructor(props, context){\n    super(props);\n  }\n\n  static contextTypes = {\n    router: React.PropTypes.object.isRequired\n  }\n\n  componentWillMount() {\n    if (!this.props.user.id){\n      this.props.getCurrentUser().catch(this.catchError);\n    }\n\n    ws.onmessage = this.handleNewMessage;\n    ws.onclose = () => this.props.setError(\"Connection lost, please try again later...\")\n  }\n\n  catchError = () => {\n    if (!this.props.user) {\n      window.location.replace(\"/login\");\n    }\n  }\n\n  componentWillReceiveProps(nextProps) {\n    if (!this.props.user.id && nextProps.user.id) {\n      this.props.stopLoading();\n      ws.send(JSON.stringify({\n        type: \"USER_CONNECTED\",\n        data: {\n          username: nextProps.user.username,\n          nickname: nextProps.user.nickname\n        }\n      }));\n    }\n  }\n  handleNewMessage = (res) => {\n    let message = JSON.parse(res.data);\n    switch (message.type) {\n      case \"GAME_CONNECTED\":\n        this.props.fetchedGameData(message.data)\n        break;\n      case \"MOVE_MADE\":\n      case \"GAME_FINISHED\":\n        this.props.updatedGame(message.data);\n        break;\n      case \"NEW_MESSAGE\":\n        this.props.addNewMessage(message.data);\n        break;\n      case \"FETCHED_MESSAGES\":\n        this.props.fetchedMessages(message.data);\n        break;\n      case \"CREATED_GAME\":\n        this.props.createdGame(message.data)\n        break;\n      default:\n        break;\n    }\n  }\n\n  logOut = () => {\n    this.setState({ loading: true });\n    this.props.logOut().then(() => {\n      window.location.replace(\"/\");\n    }).catch(() => {\n      window.location.replace(\"/\");\n    });\n  }\n  loadingScreen() {\n    if (this.props.loading) {\n      return (<div className=\"overlay\">\n        <div className=\"loader\"></div>\n      </div>);\n    }\n  }\n  flashError() {\n    if (this.props.error.message) {\n      return (<div className=\"flash-error\">\n        { this.props.error.message }\n      </div>);\n    }\n  }\n  children() {\n    if (this.props.user) {\n      return React.Children.map(this.props.children, (child) => {\n        return React.cloneElement(child, {\n          user: this.props.user,\n          ws: ws\n        });\n      });\n    }\n  }\n  render() {\n    return (\n      <div>\n        <NavBar user={this.props.user} logOut={this.logOut}/>\n        { this.flashError() }\n        { this.children() }\n        { this.loadingScreen() }\n      </div>\n    );\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/components/main.js\n **/"],"sourceRoot":""}